<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <springProfile name="test">
        <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
            <!--展示格式 layout-->
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>
                    <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
                </pattern>
            </layout>
            <!--
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                 <level>ERROR</level>
            </filter>
             -->
        </appender>
        <root level="INFO">
            <!--appender将会添加到这个loger-->
            <appender-ref ref="consoleLog"/>
        </root>
    </springProfile>

    <springProfile name="test">
        <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
            所以我们使用下面的策略，可以避免输出 Error 的日志-->
            <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--&lt;!&ndash;过滤 Error&ndash;&gt;-->
            <!--<level>INFO</level>-->
            <!--&lt;!&ndash;&lt;!&ndash;匹配到就禁止&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;<onMatch>DENY</onMatch>&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash;没有匹配到就允许&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;<onMismatch>ACCEPT</onMismatch>&ndash;&gt;-->
            <!--</filter>-->
            <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
                如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
                的日志改名为今天的日期。即，<File> 的日志都是当天的。
            -->
            <File>/tmp/logs/redis_study.log</File>
            <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
                <FileNamePattern>/tmp/logs/redis_study.%d{yyyy-MM-dd}.log</FileNamePattern>
                <!--只保留最近90天的日志-->
                <!--<maxHistory>90</maxHistory>-->
                <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
                <!--<totalSizeCap>1GB</totalSizeCap>-->
            </rollingPolicy>
            <!--日志输出编码格式化-->
            <encoder>
                <charset>UTF-8</charset>
                <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
            </encoder>
        </appender>

        <root level="INFO">
            <!--appender将会添加到这个loger-->
            <appender-ref ref="fileInfoLog"/>
        </root>

    </springProfile>

    <springProfile name="product">
        <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
            所以我们使用下面的策略，可以避免输出 Error 的日志-->
            <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--&lt;!&ndash;过滤 Error&ndash;&gt;-->
            <!--<level>INFO</level>-->
            <!--&lt;!&ndash;&lt;!&ndash;匹配到就禁止&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;<onMatch>DENY</onMatch>&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash;没有匹配到就允许&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;<onMismatch>ACCEPT</onMismatch>&ndash;&gt;-->
            <!--</filter>-->
            <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
                如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
                的日志改名为今天的日期。即，<File> 的日志都是当天的。
            -->
            <File>/tmp/logs/redis_study.log</File>
            <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
                <FileNamePattern>/tmp/logs/redis_study.%d{yyyy-MM-dd}.log</FileNamePattern>
                <!--只保留最近90天的日志-->
                <!--<maxHistory>90</maxHistory>-->
                <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
                <!--<totalSizeCap>1GB</totalSizeCap>-->
            </rollingPolicy>
            <!--日志输出编码格式化-->
            <encoder>
                <charset>UTF-8</charset>
                <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
            </encoder>
        </appender>

        <root level="INFO">
            <!--appender将会添加到这个loger-->
            <appender-ref ref="fileInfoLog"/>
        </root>

    </springProfile>

    <!--<appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--&lt;!&ndash;如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter&ndash;&gt;-->
    <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
    <!--<level>Error</level>-->
    <!--</filter>-->
    <!--&lt;!&ndash;日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则-->
    <!--如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天-->
    <!--的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
    <!--&ndash;&gt;-->
    <!--<File>${logback.logdir}/error.${logback.appname}.log</File>-->
    <!--&lt;!&ndash;滚动策略，按照时间滚动 TimeBasedRollingPolicy&ndash;&gt;-->
    <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
    <!--&lt;!&ndash;文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间&ndash;&gt;-->
    <!--<FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>-->
    <!--&lt;!&ndash;只保留最近90天的日志&ndash;&gt;-->
    <!--<maxHistory>90</maxHistory>-->
    <!--&lt;!&ndash;用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志&ndash;&gt;-->
    <!--&lt;!&ndash;<totalSizeCap>1GB</totalSizeCap>&ndash;&gt;-->
    <!--</rollingPolicy>-->
    <!--&lt;!&ndash;日志输出编码格式化&ndash;&gt;-->
    <!--<encoder>-->
    <!--<charset>UTF-8</charset>-->
    <!--<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>-->
    <!--</encoder>-->
    <!--</appender>-->
</configuration>